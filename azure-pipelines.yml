
name: $(TeamProject)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
      - master
      - feature/*

stages:
- stage: BuildTestPackageStage
  displayName: Build-Test-Package Stage
  jobs:

  - job: BuildTestPackageJob
    displayName: Build-Test-Package Job

    pool:
      vmImage: 'VS2017-Win2016'

    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'

    steps:

    - powershell: Install-Module Microsoft.Xrm.Data.Powershell -Scope CurrentUser -Force
      displayName: '###### Install Microsoft.Xrm.Data.PowerShell'
      condition: succeeded()
 
    - powershell: |
        $connectionString = "AuthType = Office365;" + `
            "Username = $env:EnvironmentUsername;" + `
            "Password = $env:EnvironmentPassword;" + `
            "Url = https://$env:EnvironmentUrl"
 
        $connectionString
 
        $connection = Get-CrmConnection `
          -ConnectionString $connectionString
         
        $connection
 
      env:
        EnvironmentUrl: $(eurl)
        EnvironmentUsername: $(eusername)
        EnvironmentPassword: $(epassword)
      displayName: '################  Connect'
      condition: succeeded()

    ############################### Build

    - task: NuGetToolInstaller@0

    - task: NuGetCommand@2
      condition: succeeded()
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      condition: succeeded()
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    ############################### TEST

    - task: VSTest@2
      condition: succeeded()
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
      displayName: 'Run VSTest'

    ############################### Package

    - script: md tools
      condition: succeeded()
      displayName: 'Create tools directory'

#    - powershell: |
#        Invoke-WebRequest `
#          -Uri https://dist.nuget.org/win-x86-commandline/latest/nuget.exe `
#          -OutFile tools\\nuget.exe
#      displayName: 'Download nuget.exe'

    - powershell: |
        nuget install Microsoft.CrmSdk.CoreTools -O tools
        md "tools\\CoreTools"
        $coreToolsFolder = Get-ChildItem tools | Where-Object {$_.Name -match 'Microsoft.CrmSdk.CoreTools.'}
        move "tools\\$coreToolsFolder\\content\\bin\\coretools\\*.*" "tools\\CoreTools"
        Remove-Item "tools\\$coreToolsFolder" -Force -Recurse
      displayName: 'Install CoreTools'
      condition: succeeded()

    #Pack Solution from repository
    # .\bin\coretools\SolutionPackager.exe /action Pack /packagetype Unmanaged /zipfile .\contoso.zip /folder .\package /map: map.xml
    - powershell: |
        Start-Process tools/CoreTools/SolutionPackager.exe `
        -ArgumentList `
          "/action: Pack", `
          "/zipfile: $(Build.ArtifactStagingDirectory)\solutionpackage.zip", `
          "/folder: SolutionPackage/package/", `
          "/map: SolutionPackage/map.xml", `
          "/packagetype: $env:PackageType" `
        -Wait `
        -NoNewWindow
      env:
        PackageType: $(solution.packagetype)
      displayName: 'Solution Packager: pack solution'
      condition: succeeded()

    #Publish build artifacts
    #- task: PublishBuildArtifacts@1
    #  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    #  inputs:
    #    pathtoPublish: $(Build.ArtifactStagingDirectory)
    #    artifactName: drop
    #  displayName: 'Publish build artifacts'

    - task: PublishPipelineArtifact@0
      condition: succeeded()
      inputs:
        artifactName: 'package'
        targetPath: $(Build.ArtifactStagingDirectory)



- stage: Deploy2ProductionStage
  displayName: Deploy to Production Stage
  #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:  # stage-level
    STAGE_VAR: 'stage value'
    STAGE_Url: $(eurl)
  jobs:
  - deployment: Deploy2Production_Job
    displayName: Deploy to Production Job
    pool:
      vmImage: 'VS2017-Win2016'
    environment: Production
    variables:  # job-level
      JOB_VAR: 'a job var'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none

          - script: echo $(STAGE_VAR) $(JOB_VAR) $(STAGE_Url)

          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'package'
              targetPath: $(Build.ArtifactStagingDirectory)

          #Import solution into target environment
          - powershell: Install-Module Microsoft.Xrm.Data.Powershell -Scope CurrentUser -Force
            displayName: 'Install Microsoft.Xrm.Data.PowerShell'
            condition: succeeded()

          - powershell: echo $env:MYSECRET
            displayName: '##### direct from pipeline variables'
            env:
              MySecret: $(eurl)

          - powershell: echo $(STAGE_Url)
            displayName: '##### just stage var'

          #Connect to CRM and Import
          - powershell: |
              echo $env:ES
              echo '###'
              
              echo $(STAGE_Url)
              echo '###'
              $connectionString = "AuthType = Office365;" + `
                  "Username = $env:EnvironmentUsername;" + `
                  "Password = $env:EnvironmentPassword;" + `
                  "Url = https://$env:EnvironmentUrl"

              echo $connectionString
              echo '###'

             #$connection = Get-CrmConnection `
             #  -ConnectionString $connectionString

             #$connection

             #$connection = Get-CrmConnection `
             #  -ConnectionString `
             #    ("AuthType = Office365;" + `
             #    "Username = $env:EnvironmentUsername;" + `
             #    "Password = $env:EnvironmentPassword;" + `
             #    "Url = https://$env:EnvironmentUrl")

             ##I had to use Import-CrmSolutionAsync -BlockUntilImportComplete in my case for a fairly bigger solution.
             #Import-CrmSolution `
             #  -conn $connection `
             #  -SolutionFilePath $(Build.ArtifactStagingDirectory)\solutionpackage.zip
             #  #-MaxWaitTimeInSeconds

             #Publish-CrmAllCustomization -conn $connection
            env:
              Es: '21312'
              EnvironmentUrl: $(eurl)
              EnvironmentUsername: $(eusername)
              EnvironmentPassword: $(epassword)
            displayName: 'Import solution'
            condition: succeeded()
